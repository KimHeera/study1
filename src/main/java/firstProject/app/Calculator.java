/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package firstProject.app;

import java.util.ArrayList;
import java.util.Stack;
import javax.swing.*;
import java.awt.*;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.math.BigDecimal;
import java.text.DecimalFormat;

public class Calculator extends JFrame {
	String value = "";

	String output = "";
	boolean reset = false;
	String n;
	String result, t = "";
	String change;

	JPanel panel1 = new JPanel(); // 계산 결과 나오는 panel
	JPanel panel2 = new JPanel(); // 버튼들 panel

	static JTextField inputField = new JTextField(10); // 숫자 입력하는 field

	static String[] btntext = { "AC", "!", "=", "<-", "7", "8", "9", "x", "4", "5", "6", "+", "1", "2", "3", "-", "0",
			"00", ".", "/" }; // 버튼에 들어갈 text들
	static JButton[] btns = new JButton[20];

	public Calculator() {
		this.setTitle("Calculator");

		panel1.setLayout(new GridLayout(1, 1, 5, 5));
		panel2.setLayout(new GridLayout(5, 4, 1, 1));

		// setOpaque를 true로 설정해야 배경 색이 적용됨.
		panel2.setOpaque(true);
		panel2.setBackground(Color.LIGHT_GRAY);

		this.add(panel1, BorderLayout.NORTH);
		this.add(panel2, BorderLayout.CENTER);

		inputField.setText("0"); // input field의 default value를 0으로 설정
		inputField.setHorizontalAlignment(JTextField.RIGHT); // input field의 정렬을 오른쪽 정렬로 설정
		Font font = new Font("Arial", Font.PLAIN, 60); // 폰트 적용을 위한 변수 생성
		inputField.setFont(font); // input field에 폰트 적용
		inputField.setEditable(false); // 직접 입력은 불가능하도록 설정

		panel1.add(inputField); // panel1에 input field 추가

		// 버튼들
		for (int i = 0; i < btns.length; i++) {
			btns[i] = new JButton(btntext[i]); // 객체 생성
			btns[i].setVisible(true);// 보이게
			panel2.add(btns[i]); // panel2에 추가
			btns[i].addActionListener(listener); // 버튼의 action을 listen하고 있는 listener를 추가
		}

		for (int i = 0; i < btns.length; i++) { // 초기 화면의 버튼들은 숫자 제외하고는 모두 선택 불가능 하도록 설정
			if (value.equals("") && i != 4 && i != 5 && i != 6 && i != 8 && i != 9 && i != 10 && i != 12 && i != 13
					&& i != 14 && i != 16 && i != 17)
				btns[i].setEnabled(false);
		}

		this.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE); // x버튼 활성화

		this.setSize(400, 470); // 기본 크기 지정
		this.setResizable(true); // frame의 size를 자유자재로 바꿀 수 있도록 활성화

		this.setVisible(true); // frame visible
	}

	public static void main(String[] args) {
		new Calculator();
	}

	ActionListener listener = new ActionListener() {
		public void actionPerformed(ActionEvent e) {
			String input = e.getActionCommand();

			btns[0].setEnabled(true);
			btns[1].setEnabled(true);
			btns[2].setEnabled(true);
			btns[3].setEnabled(true);
			btns[7].setEnabled(true);
			btns[11].setEnabled(true);
			btns[15].setEnabled(true);
			btns[18].setEnabled(true);
			btns[19].setEnabled(true);

			if (opt(input)) { // 숫자들은 그냥 출력만 함.
				if (reset) {
					value = "";
					// output = "";
					change = "";
					inputField.setText("");

					reset = false;
				}

				value += input;
				inputField.setText(value);
				// output += input;
				change += input;
			}

			else { // oprator들 다루는 else구문

				if (reset) {
					output = result;
					change = result;
					value = output;
				}

				reset = false;

				if (input.equals("AC")) {
					inputField.setText("0");
					value = "";

					change = "";

					btns[0].setEnabled(false);
					btns[1].setEnabled(false);
					btns[2].setEnabled(false);
					btns[3].setEnabled(false);
					btns[7].setEnabled(false);
					btns[11].setEnabled(false);
					btns[15].setEnabled(false);
					btns[18].setEnabled(false);
					btns[19].setEnabled(false);

					btns[4].setEnabled(true);
					btns[5].setEnabled(true);
					btns[6].setEnabled(true);
					btns[8].setEnabled(true);
					btns[9].setEnabled(true);
					btns[10].setEnabled(true);
					btns[12].setEnabled(true);
					btns[13].setEnabled(true);
					btns[14].setEnabled(true);
					btns[16].setEnabled(true);
					btns[17].setEnabled(true);

				}

				// --------------------------------------------

				else if (input.equals("<-")) {

					value = value.substring(0, value.length() - 1);
					inputField.setText(value);
					change = change.substring(0, change.length() - 2);
				}

				// --------------------------------------------

				else if (input.equals("!")) {
					value += input;
					inputField.setText(value);

					//
				}

				// ---------------------------------------------

				else if (!input.equals("0") && !input.equals("=")) {

					value += input;
					inputField.setText(value);

				}

				// --------------------------------------------

				else if (input.equals("=")) {

					String u = "";
					reset = true;
					String str = "";

					change = value;
					ArrayList<String> arr3 = changeString(change);

					for (int i = 0; i < arr3.size(); i++) {

						if (arr3.get(i).contains("!")) {
							if (arr3.get(i).contains(".")) {
								inputField.setText("syntax error");

								for (int j = 1; j < 20; j++)
									btns[j].setEnabled(false);

								return;
							}
							str = arr3.get(i);
							str = str.substring(0, str.length() - 1);

							int y = Integer.parseInt(str);

							int fac = factorial(y);

							arr3.set(i, Integer.toString(fac));
						}
					}

					n = postfix(arr3);

					BigDecimal c = new BigDecimal(n);
					DecimalFormat formatter = new DecimalFormat("0.#########");

					result = formatter.format(c);
					inputField.setText(result);

				}
			}
		}

	};

	static boolean opt(String ch) {
		if ((ch.equals("+")) || (ch.equals("-")) || (ch.equals("x")) || (ch.equals("/")) || (ch.equals("="))
				|| ch.equals("AC") || ch.equals("<-") || ch.equals("!"))
			return false;
		else
			return true;
	}

	int prece(String op) {
		if (op == "-" || op == "+")
			return 1;
		else if (op == "/" || op == "x")
			return 2;
		else
			return 0;
	}

	ArrayList<String> changeString(String s) {
		ArrayList<String> arr = new ArrayList<>();

		String ad = "";
		for (int i = 0; i < s.length(); i++) {
			char a = s.charAt(i);

			if (a == '+' || a == '-' || a == 'x' || a == '/') {
				arr.add(ad);
				ad = "";
				arr.add(a + "");
			} else
				ad += a;
		}
		arr.add(ad);

		for (int i = 0; i < arr.size(); i++) {
			if (arr.get(i).equals("")) {
				arr.remove("");
			}
		}

		for (int i = 1; i < arr.size(); i++) {
			String prev = arr.get(i - 1);
			String curr = arr.get(i);

			if ((prev.equals("+") || prev.equals("-") || prev.equals("x") || prev.equals("/")) && curr.equals("-")) {
				arr.set(i, arr.get(i) + arr.get(i + 1));
				arr.remove(i + 1);
			}
		}
		return arr;
	}

	public String postfix(ArrayList<String> arr2) {
		Stack<String> stack = new Stack<>();
		ArrayList<String> calc = new ArrayList<>();

		for (int i = 0; i < arr2.size(); i++) {
			if (opt(arr2.get(i)))
				calc.add(arr2.get(i));
			else {
				if (!stack.empty()) { // 스택에 이미 뭐가 있을
					if (prece(arr2.get(i)) <= prece(stack.peek())) {

						while (true) {

							if (stack.empty() || prece(arr2.get(i)) > prece(stack.peek()))
								break;

							calc.add(stack.peek());
							stack.pop();

						}

						stack.push(arr2.get(i));

					} else {
						stack.push(arr2.get(i));

					}
				} else { // 스택에 암것도 없을
					stack.push(arr2.get(i));
				}
			}
		}
		while (!stack.empty()) {
			calc.add(stack.peek());
			stack.pop();
		}

		// Double re;

		for (int i = 0; i < calc.size(); i++) {
			if (opt(calc.get(i))) {

				stack.push((calc.get(i)));
			} else {
				double n2 = Double.parseDouble(stack.pop());
				double n1 = Double.parseDouble(stack.pop());

				if (calc.get(i).equals("+"))
					stack.push(Double.toString(n1 + n2));
				else if (calc.get(i).equals("-"))
					stack.push(Double.toString(n1 - n2));
				else if (calc.get(i).equals("x"))
					stack.push(Double.toString(n1 * n2));
				else if (calc.get(i).equals("/")) {
					if (n2 == 0) {
						inputField.setText("숫자 아님");
						return "";
					} else
						stack.push(Double.toString(n1 / n2));
				}
			}
		}

		return stack.pop();
	}

	public static int factorial(int n) {
		if (n == 0)
			return 1;
		else
			return (n * factorial(n - 1));
	}

	// public static Double safeAdd(Double l, Double r) {
	// if(r>0) {
	// if(l > Double.MAX_VALUE-r){
	// throw new ArithmeticException("OverFlow 발생");
	// }
	// }
	//
	// else {
	// if(l < Double.MAX_VALUE-r) {
	// throw new ArithmeticException("OverFlow 발생");
	// }
	// }
	//
	// return l+r;
	// }

	// public static Double safeSub(Double l, Double r) {
	// if(r>0) {
	// if(l > Double.MAX_VALUE-r){
	// throw new ArithmeticException("OverFlow 발생");
	// }
	// }
	//
	// else {
	// if(l < Double.MAX_VALUE-r) {
	// throw new ArithmeticException("OverFlow 발생");
	// }
	// }
	//
	// return l+r;
	// }

	// public static Double safeMul(Double l, Double r) {
	// if(r>0) {
	// if(l > Double.MAX_VALUE-r){
	// throw new ArithmeticException("OverFlow 발생");
	// }
	// }
	//
	// else {
	// if(l < Double.MAX_VALUE-r) {
	// throw new ArithmeticException("OverFlow 발생");
	// }
	// }
	//
	// return l*r;
	// }
}